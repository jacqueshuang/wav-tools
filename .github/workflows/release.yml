name: Release Binaries

on:
  # 当你创建一个新的 Git 标签时触发此工作流
  # 例如：git tag -a v1.0.0 -m "Release v1.0.0" && git push origin v1.0.0
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # 匹配类似 v1.0.0, v1.2.3 这样的语义化版本标签

jobs:
  build-and-release:
    name: Build for ${{ matrix.os }}

    # 定义要构建的操作系统和对应的 Rust 目标
    strategy:
      fail-fast: false # 即使一个平台构建失败，其他平台也会继续
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # 定义每个操作系统对应的 Rust 交叉编译目标和生成的文件名
        include:
          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-musl # Linux 静态编译，兼容性最佳
            artifact_name: p-wav-cli-linux-x64
            archive_format: tar.gz # Linux 和 macOS 使用 tar.gz
          - os: macos-latest
            rust_target: x86_64-apple-darwin # macOS Intel 64-bit (M1/M2/M3通过Rosetta 2运行)
            artifact_name: p-wav-cli-macos-x64
            archive_format: tar.gz
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc # Windows 64-bit (MSVC toolchain)
            artifact_name: p-wav-cli-windows-x64
            archive_format: zip # Windows 使用 zip

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 使用 actions/checkout@v4 来获取你的代码

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable # 安装 Rust stable 工具链
        with:
          toolchain: stable
          target: ${{ matrix.rust_target }}

      - name: Install cross-compilation tools (Linux musl)
        # 仅在 Ubuntu 上构建 musl 目标时运行
        if: matrix.os == 'ubuntu-latest' && matrix.rust_target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools # 安装 musl 工具链
          rustup target add ${{ matrix.rust_target }} # 确保目标被添加

      - name: Build project (release mode)
        run: |
          # 使用 --target 参数进行交叉编译
          cargo build --release --target ${{ matrix.rust_target }}

      - name: Prepare artifact
        id: prepare_artifact # 为此步骤分配ID，以便后续步骤引用其输出
        # 动态选择 shell：Windows 使用 PowerShell，其他使用 Bash
        shell: ${{ matrix.os == 'windows-latest' && 'powershell' || 'bash' }}
        run: |
          $EXECUTABLE_NAME="p-wav-cli" # 你的可执行文件名称
          $ARTIFACT_DIR="target/${{ matrix.rust_target }}/release"

          if ("${{ matrix.os }}" -eq "windows-latest") {
            $ARCHIVE_FILE="${{ matrix.artifact_name }}.${{ matrix.archive_format }}"
            # 在 Windows 上，可执行文件会有 .exe 后缀
            Set-Location $ARTIFACT_DIR # PowerShell 中的 cd
            Compress-Archive -Path "$EXECUTABLE_NAME.exe" -DestinationPath "$ARCHIVE_FILE" -Force
            # PowerShell 中设置输出变量
            echo "zip_path=$((Get-Location).Path)/$ARCHIVE_FILE" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            echo "archive_name=${{ matrix.artifact_name }}.${{ matrix.archive_format }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            $ARCHIVE_FILE="${{ matrix.artifact_name }}.${{ matrix.archive_format }}"
            # 在 Linux 和 macOS 上，可执行文件没有后缀
            cd "$ARTIFACT_DIR"
            # 对于 tar.gz 格式
            if [ "${{ matrix.archive_format }}" == "tar.gz" ]; then
                tar -czvf "$ARCHIVE_FILE" "$EXECUTABLE_NAME"
            # 如果是其他 Unix-like 系统的 zip (这里不会用到，因为定义了 tar.gz)
            elif [ "${{ matrix.archive_format }}" == "zip" ]; then
                zip -j "$ARCHIVE_FILE" "$EXECUTABLE_NAME" # -j 是 junk paths, 只压缩文件，不包括目录结构
            fi
            # Bash 中设置输出变量
            echo "zip_path=$(pwd)/$ARCHIVE_FILE" >> $GITHUB_OUTPUT
            echo "archive_name=${{ matrix.artifact_name }}.${{ matrix.archive_format }}" >> $GITHUB_OUTPUT
          }

      - name: Upload artifact to GitHub Release
        # 仅当工作流由标签推送触发时才执行此步骤
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ steps.prepare_artifact.outputs.zip_path }} # 使用上一步准备好的压缩文件路径
          prerelease: false # 设置为 true 如果是预发布版本
          tag_name: ${{ github.ref }} # 使用当前的 Git 标签作为 Release 的标签名
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub 自动提供的令牌