name: Release Binaries

on:
  # 当你创建一个新的 Git 标签时触发此工作流
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # 匹配类似 v1.0.0, v1.2.3 这样的语义化版本标签

jobs:
  build-and-release:
    name: Build for ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-musl
            artifact_name: p-wav-cli-linux-x64
            archive_format: tar.gz
          - os: macos-latest
            rust_target: x86_64-apple-darwin
            artifact_name: p-wav-cli-macos-x64
            archive_format: tar.gz
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            artifact_name: p-wav-cli-windows-x64
            archive_format: zip

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.rust_target }}

      - name: Install cross-compilation tools (Linux musl)
        if: matrix.os == 'ubuntu-latest' && matrix.rust_target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          rustup target add ${{ matrix.rust_target }}

      - name: Build project (release mode)
        run: |
          cargo build --release --target ${{ matrix.rust_target }}

      # --- Linux 和 macOS 的打包步骤 ---
      - name: Prepare artifact (Linux/macOS)
        id: prepare_artifact_unix
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          EXECUTABLE_NAME="p-wav-cli"
          ARTIFACT_DIR="target/${{ matrix.rust_target }}/release"
          ARCHIVE_FILE="${{ matrix.artifact_name }}.${{ matrix.archive_format }}"

          cd "$ARTIFACT_DIR"
          tar -czvf "$ARCHIVE_FILE" "$EXECUTABLE_NAME"
          
          echo "zip_path=$(pwd)/$ARCHIVE_FILE" >> $GITHUB_OUTPUT
          echo "archive_name=${{ matrix.artifact_name }}.${{ matrix.archive_format }}" >> $GITHUB_OUTPUT

      # --- Windows 的打包步骤 ---
      - name: Prepare artifact (Windows)
        id: prepare_artifact_windows
        if: matrix.os == 'windows-latest'
        shell: powershell # 明确指定 shell 为 powershell
        run: |
          $EXECUTABLE_NAME="p-wav-cli"
          $ARTIFACT_DIR="target/${{ matrix.rust_target }}/release"
          $ARCHIVE_FILE_NAME="${{ matrix.artifact_name }}.${{ matrix.archive_format }}" # 仅文件名

          Set-Location $ARTIFACT_DIR # PowerShell 中的 cd
          Compress-Archive -Path "$EXECUTABLE_NAME.exe" -DestinationPath "$ARCHIVE_FILE_NAME" -Force
          
          # ✅ 修正：更可靠的路径构建方式，使用 Join-Path
          $full_archive_path = Join-Path -Path $((Get-Location).Path) -ChildPath "$ARCHIVE_FILE_NAME"
          
          # PowerShell 中设置输出变量
          echo "zip_path=$full_archive_path" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "archive_name=${{ matrix.artifact_name }}.${{ matrix.archive_format }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifact to GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ (matrix.os != 'windows-latest' && steps.prepare_artifact_unix.outputs.zip_path) || '' }}
            ${{ (matrix.os == 'windows-latest' && steps.prepare_artifact_windows.outputs.zip_path) || '' }}
          prerelease: false
          tag_name: ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}